# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motor_sc/g_sens.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import motor_sc.msg

class g_sens(genpy.Message):
  _md5sum = "2ba48ff788ab0557badb810806e50757"
  _type = "motor_sc/g_sens"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sens9ax Front_sens
sens9ax Rear_sens
================================================================================
MSG: motor_sc/sens9ax
uint8 ID
uint64 timestamp
float64[3] compass
float64[3] gyro
float64[3] accel
float64[3] fusionPose
float64[4] fusionQPose
"""
  __slots__ = ['Front_sens','Rear_sens']
  _slot_types = ['motor_sc/sens9ax','motor_sc/sens9ax']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Front_sens,Rear_sens

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(g_sens, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Front_sens is None:
        self.Front_sens = motor_sc.msg.sens9ax()
      if self.Rear_sens is None:
        self.Rear_sens = motor_sc.msg.sens9ax()
    else:
      self.Front_sens = motor_sc.msg.sens9ax()
      self.Rear_sens = motor_sc.msg.sens9ax()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BQ().pack(_x.Front_sens.ID, _x.Front_sens.timestamp))
      buff.write(_get_struct_3d().pack(*self.Front_sens.compass))
      buff.write(_get_struct_3d().pack(*self.Front_sens.gyro))
      buff.write(_get_struct_3d().pack(*self.Front_sens.accel))
      buff.write(_get_struct_3d().pack(*self.Front_sens.fusionPose))
      buff.write(_get_struct_4d().pack(*self.Front_sens.fusionQPose))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.Rear_sens.ID, _x.Rear_sens.timestamp))
      buff.write(_get_struct_3d().pack(*self.Rear_sens.compass))
      buff.write(_get_struct_3d().pack(*self.Rear_sens.gyro))
      buff.write(_get_struct_3d().pack(*self.Rear_sens.accel))
      buff.write(_get_struct_3d().pack(*self.Rear_sens.fusionPose))
      buff.write(_get_struct_4d().pack(*self.Rear_sens.fusionQPose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Front_sens is None:
        self.Front_sens = motor_sc.msg.sens9ax()
      if self.Rear_sens is None:
        self.Rear_sens = motor_sc.msg.sens9ax()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.Front_sens.ID, _x.Front_sens.timestamp,) = _get_struct_BQ().unpack(str[start:end])
      start = end
      end += 24
      self.Front_sens.compass = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Front_sens.gyro = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Front_sens.accel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Front_sens.fusionPose = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.Front_sens.fusionQPose = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.Rear_sens.ID, _x.Rear_sens.timestamp,) = _get_struct_BQ().unpack(str[start:end])
      start = end
      end += 24
      self.Rear_sens.compass = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Rear_sens.gyro = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Rear_sens.accel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.Rear_sens.fusionPose = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.Rear_sens.fusionQPose = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BQ().pack(_x.Front_sens.ID, _x.Front_sens.timestamp))
      buff.write(self.Front_sens.compass.tostring())
      buff.write(self.Front_sens.gyro.tostring())
      buff.write(self.Front_sens.accel.tostring())
      buff.write(self.Front_sens.fusionPose.tostring())
      buff.write(self.Front_sens.fusionQPose.tostring())
      _x = self
      buff.write(_get_struct_BQ().pack(_x.Rear_sens.ID, _x.Rear_sens.timestamp))
      buff.write(self.Rear_sens.compass.tostring())
      buff.write(self.Rear_sens.gyro.tostring())
      buff.write(self.Rear_sens.accel.tostring())
      buff.write(self.Rear_sens.fusionPose.tostring())
      buff.write(self.Rear_sens.fusionQPose.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Front_sens is None:
        self.Front_sens = motor_sc.msg.sens9ax()
      if self.Rear_sens is None:
        self.Rear_sens = motor_sc.msg.sens9ax()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.Front_sens.ID, _x.Front_sens.timestamp,) = _get_struct_BQ().unpack(str[start:end])
      start = end
      end += 24
      self.Front_sens.compass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Front_sens.gyro = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Front_sens.accel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Front_sens.fusionPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.Front_sens.fusionQPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 9
      (_x.Rear_sens.ID, _x.Rear_sens.timestamp,) = _get_struct_BQ().unpack(str[start:end])
      start = end
      end += 24
      self.Rear_sens.compass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Rear_sens.gyro = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Rear_sens.accel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.Rear_sens.fusionPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.Rear_sens.fusionQPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_BQ = None
def _get_struct_BQ():
    global _struct_BQ
    if _struct_BQ is None:
        _struct_BQ = struct.Struct("<BQ")
    return _struct_BQ
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
