// Generated by gencpp from file motor_sc/motors_drive.msg
// DO NOT EDIT!


#ifndef MOTOR_SC_MESSAGE_MOTORS_DRIVE_H
#define MOTOR_SC_MESSAGE_MOTORS_DRIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_sc
{
template <class ContainerAllocator>
struct motors_drive_
{
  typedef motors_drive_<ContainerAllocator> Type;

  motors_drive_()
    : cnt_data0()
    , cnt_data1()
    , cnt_data2()
    , cnt_data3()
    , servo()  {
      cnt_data0.assign(0);

      cnt_data1.assign(0);

      cnt_data2.assign(0);

      cnt_data3.assign(0);

      servo.assign(0);
  }
  motors_drive_(const ContainerAllocator& _alloc)
    : cnt_data0()
    , cnt_data1()
    , cnt_data2()
    , cnt_data3()
    , servo()  {
  (void)_alloc;
      cnt_data0.assign(0);

      cnt_data1.assign(0);

      cnt_data2.assign(0);

      cnt_data3.assign(0);

      servo.assign(0);
  }



   typedef boost::array<uint8_t, 2>  _cnt_data0_type;
  _cnt_data0_type cnt_data0;

   typedef boost::array<uint8_t, 2>  _cnt_data1_type;
  _cnt_data1_type cnt_data1;

   typedef boost::array<uint8_t, 2>  _cnt_data2_type;
  _cnt_data2_type cnt_data2;

   typedef boost::array<uint8_t, 2>  _cnt_data3_type;
  _cnt_data3_type cnt_data3;

   typedef boost::array<uint16_t, 4>  _servo_type;
  _servo_type servo;




  typedef boost::shared_ptr< ::motor_sc::motors_drive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_sc::motors_drive_<ContainerAllocator> const> ConstPtr;

}; // struct motors_drive_

typedef ::motor_sc::motors_drive_<std::allocator<void> > motors_drive;

typedef boost::shared_ptr< ::motor_sc::motors_drive > motors_drivePtr;
typedef boost::shared_ptr< ::motor_sc::motors_drive const> motors_driveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_sc::motors_drive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_sc::motors_drive_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_sc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motor_sc': ['/home/rctvrc/catkin_workspace/src/motor_sc/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_sc::motors_drive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_sc::motors_drive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_sc::motors_drive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_sc::motors_drive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_sc::motors_drive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_sc::motors_drive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_sc::motors_drive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c798d1a8705d37440ee2346bd48b7af3";
  }

  static const char* value(const ::motor_sc::motors_drive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc798d1a8705d3744ULL;
  static const uint64_t static_value2 = 0x0ee2346bd48b7af3ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_sc::motors_drive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_sc/motors_drive";
  }

  static const char* value(const ::motor_sc::motors_drive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_sc::motors_drive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[2] cnt_data0 \n\
uint8[2] cnt_data1 \n\
uint8[2] cnt_data2 \n\
uint8[2] cnt_data3 \n\
uint16[4] servo\n\
";
  }

  static const char* value(const ::motor_sc::motors_drive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_sc::motors_drive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cnt_data0);
      stream.next(m.cnt_data1);
      stream.next(m.cnt_data2);
      stream.next(m.cnt_data3);
      stream.next(m.servo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motors_drive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_sc::motors_drive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_sc::motors_drive_<ContainerAllocator>& v)
  {
    s << indent << "cnt_data0[]" << std::endl;
    for (size_t i = 0; i < v.cnt_data0.size(); ++i)
    {
      s << indent << "  cnt_data0[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cnt_data0[i]);
    }
    s << indent << "cnt_data1[]" << std::endl;
    for (size_t i = 0; i < v.cnt_data1.size(); ++i)
    {
      s << indent << "  cnt_data1[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cnt_data1[i]);
    }
    s << indent << "cnt_data2[]" << std::endl;
    for (size_t i = 0; i < v.cnt_data2.size(); ++i)
    {
      s << indent << "  cnt_data2[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cnt_data2[i]);
    }
    s << indent << "cnt_data3[]" << std::endl;
    for (size_t i = 0; i < v.cnt_data3.size(); ++i)
    {
      s << indent << "  cnt_data3[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cnt_data3[i]);
    }
    s << indent << "servo[]" << std::endl;
    for (size_t i = 0; i < v.servo.size(); ++i)
    {
      s << indent << "  servo[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.servo[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_SC_MESSAGE_MOTORS_DRIVE_H
