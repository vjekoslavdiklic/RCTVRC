// Generated by gencpp from file motor_sc/mcnt_msg.msg
// DO NOT EDIT!


#ifndef MOTOR_SC_MESSAGE_MCNT_MSG_H
#define MOTOR_SC_MESSAGE_MCNT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_sc
{
template <class ContainerAllocator>
struct mcnt_msg_
{
  typedef mcnt_msg_<ContainerAllocator> Type;

  mcnt_msg_()
    : ID(0)
    , cnt_data()  {
      cnt_data.assign(0);
  }
  mcnt_msg_(const ContainerAllocator& _alloc)
    : ID(0)
    , cnt_data()  {
  (void)_alloc;
      cnt_data.assign(0);
  }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef boost::array<uint8_t, 2>  _cnt_data_type;
  _cnt_data_type cnt_data;




  typedef boost::shared_ptr< ::motor_sc::mcnt_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_sc::mcnt_msg_<ContainerAllocator> const> ConstPtr;

}; // struct mcnt_msg_

typedef ::motor_sc::mcnt_msg_<std::allocator<void> > mcnt_msg;

typedef boost::shared_ptr< ::motor_sc::mcnt_msg > mcnt_msgPtr;
typedef boost::shared_ptr< ::motor_sc::mcnt_msg const> mcnt_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_sc::mcnt_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_sc::mcnt_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_sc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motor_sc': ['/home/rctvrc/catkin_workspace/src/motor_sc/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_sc::mcnt_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_sc::mcnt_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_sc::mcnt_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_sc::mcnt_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_sc::mcnt_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_sc::mcnt_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_sc::mcnt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f8d9d38dc81575a88dd6f44006cd842";
  }

  static const char* value(const ::motor_sc::mcnt_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f8d9d38dc81575aULL;
  static const uint64_t static_value2 = 0x88dd6f44006cd842ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_sc::mcnt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_sc/mcnt_msg";
  }

  static const char* value(const ::motor_sc::mcnt_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_sc::mcnt_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n\
uint8[2] cnt_data \n\
";
  }

  static const char* value(const ::motor_sc::mcnt_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_sc::mcnt_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.cnt_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mcnt_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_sc::mcnt_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_sc::mcnt_msg_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "cnt_data[]" << std::endl;
    for (size_t i = 0; i < v.cnt_data.size(); ++i)
    {
      s << indent << "  cnt_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cnt_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_SC_MESSAGE_MCNT_MSG_H
