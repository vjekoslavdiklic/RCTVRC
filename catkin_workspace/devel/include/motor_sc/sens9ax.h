// Generated by gencpp from file motor_sc/sens9ax.msg
// DO NOT EDIT!


#ifndef MOTOR_SC_MESSAGE_SENS9AX_H
#define MOTOR_SC_MESSAGE_SENS9AX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_sc
{
template <class ContainerAllocator>
struct sens9ax_
{
  typedef sens9ax_<ContainerAllocator> Type;

  sens9ax_()
    : ID(0)
    , timestamp(0)
    , compass()
    , gyro()
    , accel()
    , fusionPose()
    , fusionQPose()  {
      compass.assign(0.0);

      gyro.assign(0.0);

      accel.assign(0.0);

      fusionPose.assign(0.0);

      fusionQPose.assign(0.0);
  }
  sens9ax_(const ContainerAllocator& _alloc)
    : ID(0)
    , timestamp(0)
    , compass()
    , gyro()
    , accel()
    , fusionPose()
    , fusionQPose()  {
  (void)_alloc;
      compass.assign(0.0);

      gyro.assign(0.0);

      accel.assign(0.0);

      fusionPose.assign(0.0);

      fusionQPose.assign(0.0);
  }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<double, 3>  _compass_type;
  _compass_type compass;

   typedef boost::array<double, 3>  _gyro_type;
  _gyro_type gyro;

   typedef boost::array<double, 3>  _accel_type;
  _accel_type accel;

   typedef boost::array<double, 3>  _fusionPose_type;
  _fusionPose_type fusionPose;

   typedef boost::array<double, 4>  _fusionQPose_type;
  _fusionQPose_type fusionQPose;




  typedef boost::shared_ptr< ::motor_sc::sens9ax_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_sc::sens9ax_<ContainerAllocator> const> ConstPtr;

}; // struct sens9ax_

typedef ::motor_sc::sens9ax_<std::allocator<void> > sens9ax;

typedef boost::shared_ptr< ::motor_sc::sens9ax > sens9axPtr;
typedef boost::shared_ptr< ::motor_sc::sens9ax const> sens9axConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_sc::sens9ax_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_sc::sens9ax_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_sc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motor_sc': ['/home/rctvrc/catkin_workspace/src/motor_sc/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_sc::sens9ax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_sc::sens9ax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_sc::sens9ax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_sc::sens9ax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_sc::sens9ax_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_sc::sens9ax_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_sc::sens9ax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae05447afd7568f477683a6ee9035588";
  }

  static const char* value(const ::motor_sc::sens9ax_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae05447afd7568f4ULL;
  static const uint64_t static_value2 = 0x77683a6ee9035588ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_sc::sens9ax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_sc/sens9ax";
  }

  static const char* value(const ::motor_sc::sens9ax_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_sc::sens9ax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n\
uint64 timestamp\n\
float64[3] compass\n\
float64[3] gyro\n\
float64[3] accel\n\
float64[3] fusionPose\n\
float64[4] fusionQPose\n\
";
  }

  static const char* value(const ::motor_sc::sens9ax_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_sc::sens9ax_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.timestamp);
      stream.next(m.compass);
      stream.next(m.gyro);
      stream.next(m.accel);
      stream.next(m.fusionPose);
      stream.next(m.fusionQPose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sens9ax_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_sc::sens9ax_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_sc::sens9ax_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "compass[]" << std::endl;
    for (size_t i = 0; i < v.compass.size(); ++i)
    {
      s << indent << "  compass[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.compass[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyro[i]);
    }
    s << indent << "accel[]" << std::endl;
    for (size_t i = 0; i < v.accel.size(); ++i)
    {
      s << indent << "  accel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.accel[i]);
    }
    s << indent << "fusionPose[]" << std::endl;
    for (size_t i = 0; i < v.fusionPose.size(); ++i)
    {
      s << indent << "  fusionPose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fusionPose[i]);
    }
    s << indent << "fusionQPose[]" << std::endl;
    for (size_t i = 0; i < v.fusionQPose.size(); ++i)
    {
      s << indent << "  fusionQPose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fusionQPose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_SC_MESSAGE_SENS9AX_H
