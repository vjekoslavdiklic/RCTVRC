classdef g_sens < robotics.ros.Message
    %g_sens MATLAB implementation of motor_sc/g_sens
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'motor_sc/g_sens' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2ba48ff788ab0557badb810806e50757' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MotorScSens9axClass = robotics.ros.msg.internal.MessageFactory.getClassForType('motor_sc/sens9ax') % Dispatch to MATLAB class for message type motor_sc/sens9ax
    end
    
    properties (Dependent)
        FrontSens
        RearSens
    end
    
    properties (Access = protected)
        Cache = struct('FrontSens', [], 'RearSens', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'FrontSens', 'RearSens'} % List of non-constant message properties
        ROSPropertyList = {'Front_sens', 'Rear_sens'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = g_sens(msg)
            %g_sens Construct the message object g_sens
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function frontsens = get.FrontSens(obj)
            %get.FrontSens Get the value for property FrontSens
            if isempty(obj.Cache.FrontSens)
                obj.Cache.FrontSens = feval(obj.MotorScSens9axClass, obj.JavaMessage.getFrontSens);
            end
            frontsens = obj.Cache.FrontSens;
        end
        
        function set.FrontSens(obj, frontsens)
            %set.FrontSens Set the value for property FrontSens
            validateattributes(frontsens, {obj.MotorScSens9axClass}, {'nonempty', 'scalar'}, 'g_sens', 'FrontSens');
            
            obj.JavaMessage.setFrontSens(frontsens.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.FrontSens)
                obj.Cache.FrontSens.setJavaObject(frontsens.getJavaObject);
            end
        end
        
        function rearsens = get.RearSens(obj)
            %get.RearSens Get the value for property RearSens
            if isempty(obj.Cache.RearSens)
                obj.Cache.RearSens = feval(obj.MotorScSens9axClass, obj.JavaMessage.getRearSens);
            end
            rearsens = obj.Cache.RearSens;
        end
        
        function set.RearSens(obj, rearsens)
            %set.RearSens Set the value for property RearSens
            validateattributes(rearsens, {obj.MotorScSens9axClass}, {'nonempty', 'scalar'}, 'g_sens', 'RearSens');
            
            obj.JavaMessage.setRearSens(rearsens.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RearSens)
                obj.Cache.RearSens.setJavaObject(rearsens.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.FrontSens = [];
            obj.Cache.RearSens = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.FrontSens = copy(obj.FrontSens);
            cpObj.RearSens = copy(obj.RearSens);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FrontSens = feval([obj.MotorScSens9axClass '.loadobj'], strObj.FrontSens);
            obj.RearSens = feval([obj.MotorScSens9axClass '.loadobj'], strObj.RearSens);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FrontSens = saveobj(obj.FrontSens);
            strObj.RearSens = saveobj(obj.RearSens);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.motor_sc.g_sens.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.motor_sc.g_sens;
            obj.reload(strObj);
        end
    end
end
