classdef motors_feedback < robotics.ros.Message
    %motors_feedback MATLAB implementation of motor_sc/motors_feedback
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'motor_sc/motors_feedback' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '94194bc441d86cf5551f8c0ed1c128f4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ID
        CUR
        RPM
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CUR', 'ID', 'RPM'} % List of non-constant message properties
        ROSPropertyList = {'CUR', 'ID', 'RPM'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = motors_feedback(msg)
            %motors_feedback Construct the message object motors_feedback
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.ID(obj)
            %get.ID Get the value for property ID
            id = typecast(int8(obj.JavaMessage.getID), 'uint8');
        end
        
        function set.ID(obj, id)
            %set.ID Set the value for property ID
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'motors_feedback', 'ID');
            
            obj.JavaMessage.setID(id);
        end
        
        function cur = get.CUR(obj)
            %get.CUR Get the value for property CUR
            javaArray = obj.JavaMessage.getCUR;
            array = obj.readJavaArray(javaArray, 'single');
            cur = single(array);
        end
        
        function set.CUR(obj, cur)
            %set.CUR Set the value for property CUR
            validateattributes(cur, {'numeric'}, {'vector', 'numel', 4}, 'motors_feedback', 'CUR');
            
            javaArray = obj.JavaMessage.getCUR;
            array = obj.writeJavaArray(cur, javaArray, 'single');
            obj.JavaMessage.setCUR(array);
        end
        
        function rpm = get.RPM(obj)
            %get.RPM Get the value for property RPM
            javaArray = obj.JavaMessage.getRPM;
            array = obj.readJavaArray(javaArray, 'single');
            rpm = single(array);
        end
        
        function set.RPM(obj, rpm)
            %set.RPM Set the value for property RPM
            validateattributes(rpm, {'numeric'}, {'vector', 'numel', 4}, 'motors_feedback', 'RPM');
            
            javaArray = obj.JavaMessage.getRPM;
            array = obj.writeJavaArray(rpm, javaArray, 'single');
            obj.JavaMessage.setRPM(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ID = obj.ID;
            cpObj.CUR = obj.CUR;
            cpObj.RPM = obj.RPM;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ID = strObj.ID;
            obj.CUR = strObj.CUR;
            obj.RPM = strObj.RPM;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ID = obj.ID;
            strObj.CUR = obj.CUR;
            strObj.RPM = obj.RPM;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.motor_sc.motors_feedback.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.motor_sc.motors_feedback;
            obj.reload(strObj);
        end
    end
end
