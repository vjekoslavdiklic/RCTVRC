classdef motors_drive < robotics.ros.Message
    %motors_drive MATLAB implementation of motor_sc/motors_drive
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'motor_sc/motors_drive' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c798d1a8705d37440ee2346bd48b7af3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        CntData0
        CntData1
        CntData2
        CntData3
        Servo
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CntData0', 'CntData1', 'CntData2', 'CntData3', 'Servo'} % List of non-constant message properties
        ROSPropertyList = {'cnt_data0', 'cnt_data1', 'cnt_data2', 'cnt_data3', 'servo'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = motors_drive(msg)
            %motors_drive Construct the message object motors_drive
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function cntdata0 = get.CntData0(obj)
            %get.CntData0 Get the value for property CntData0
            javaArray = obj.JavaMessage.getCntData0;
            array = obj.readJavaArray(javaArray, 'uint8');
            cntdata0 = uint8(array);
        end
        
        function set.CntData0(obj, cntdata0)
            %set.CntData0 Set the value for property CntData0
            validateattributes(cntdata0, {'numeric'}, {'vector', 'numel', 2}, 'motors_drive', 'CntData0');
            
            javaArray = obj.JavaMessage.getCntData0;
            array = obj.writeJavaArray(cntdata0, javaArray, 'uint8');
            obj.JavaMessage.setCntData0(array);
        end
        
        function cntdata1 = get.CntData1(obj)
            %get.CntData1 Get the value for property CntData1
            javaArray = obj.JavaMessage.getCntData1;
            array = obj.readJavaArray(javaArray, 'uint8');
            cntdata1 = uint8(array);
        end
        
        function set.CntData1(obj, cntdata1)
            %set.CntData1 Set the value for property CntData1
            validateattributes(cntdata1, {'numeric'}, {'vector', 'numel', 2}, 'motors_drive', 'CntData1');
            
            javaArray = obj.JavaMessage.getCntData1;
            array = obj.writeJavaArray(cntdata1, javaArray, 'uint8');
            obj.JavaMessage.setCntData1(array);
        end
        
        function cntdata2 = get.CntData2(obj)
            %get.CntData2 Get the value for property CntData2
            javaArray = obj.JavaMessage.getCntData2;
            array = obj.readJavaArray(javaArray, 'uint8');
            cntdata2 = uint8(array);
        end
        
        function set.CntData2(obj, cntdata2)
            %set.CntData2 Set the value for property CntData2
            validateattributes(cntdata2, {'numeric'}, {'vector', 'numel', 2}, 'motors_drive', 'CntData2');
            
            javaArray = obj.JavaMessage.getCntData2;
            array = obj.writeJavaArray(cntdata2, javaArray, 'uint8');
            obj.JavaMessage.setCntData2(array);
        end
        
        function cntdata3 = get.CntData3(obj)
            %get.CntData3 Get the value for property CntData3
            javaArray = obj.JavaMessage.getCntData3;
            array = obj.readJavaArray(javaArray, 'uint8');
            cntdata3 = uint8(array);
        end
        
        function set.CntData3(obj, cntdata3)
            %set.CntData3 Set the value for property CntData3
            validateattributes(cntdata3, {'numeric'}, {'vector', 'numel', 2}, 'motors_drive', 'CntData3');
            
            javaArray = obj.JavaMessage.getCntData3;
            array = obj.writeJavaArray(cntdata3, javaArray, 'uint8');
            obj.JavaMessage.setCntData3(array);
        end
        
        function servo = get.Servo(obj)
            %get.Servo Get the value for property Servo
            javaArray = obj.JavaMessage.getServo;
            array = obj.readJavaArray(javaArray, 'uint16');
            servo = uint16(array);
        end
        
        function set.Servo(obj, servo)
            %set.Servo Set the value for property Servo
            validateattributes(servo, {'numeric'}, {'vector', 'numel', 4}, 'motors_drive', 'Servo');
            
            javaArray = obj.JavaMessage.getServo;
            array = obj.writeJavaArray(servo, javaArray, 'uint16');
            obj.JavaMessage.setServo(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CntData0 = obj.CntData0;
            cpObj.CntData1 = obj.CntData1;
            cpObj.CntData2 = obj.CntData2;
            cpObj.CntData3 = obj.CntData3;
            cpObj.Servo = obj.Servo;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CntData0 = strObj.CntData0;
            obj.CntData1 = strObj.CntData1;
            obj.CntData2 = strObj.CntData2;
            obj.CntData3 = strObj.CntData3;
            obj.Servo = strObj.Servo;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CntData0 = obj.CntData0;
            strObj.CntData1 = obj.CntData1;
            strObj.CntData2 = obj.CntData2;
            strObj.CntData3 = obj.CntData3;
            strObj.Servo = obj.Servo;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.motor_sc.motors_drive.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.motor_sc.motors_drive;
            obj.reload(strObj);
        end
    end
end
