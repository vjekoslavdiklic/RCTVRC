classdef sens9ax < robotics.ros.Message
    %sens9ax MATLAB implementation of motor_sc/sens9ax
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'motor_sc/sens9ax' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ae05447afd7568f477683a6ee9035588' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ID
        Timestamp
        Compass
        Gyro
        Accel
        FusionPose
        FusionQPose
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Accel', 'Compass', 'FusionPose', 'FusionQPose', 'Gyro', 'ID', 'Timestamp'} % List of non-constant message properties
        ROSPropertyList = {'accel', 'compass', 'fusionPose', 'fusionQPose', 'gyro', 'ID', 'timestamp'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = sens9ax(msg)
            %sens9ax Construct the message object sens9ax
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.ID(obj)
            %get.ID Get the value for property ID
            id = typecast(int8(obj.JavaMessage.getID), 'uint8');
        end
        
        function set.ID(obj, id)
            %set.ID Set the value for property ID
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'sens9ax', 'ID');
            
            obj.JavaMessage.setID(id);
        end
        
        function timestamp = get.Timestamp(obj)
            %get.Timestamp Get the value for property Timestamp
            timestamp = typecast(int64(obj.JavaMessage.getTimestamp), 'uint64');
        end
        
        function set.Timestamp(obj, timestamp)
            %set.Timestamp Set the value for property Timestamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'sens9ax', 'Timestamp');
            
            obj.JavaMessage.setTimestamp(timestamp);
        end
        
        function compass = get.Compass(obj)
            %get.Compass Get the value for property Compass
            javaArray = obj.JavaMessage.getCompass;
            array = obj.readJavaArray(javaArray, 'double');
            compass = double(array);
        end
        
        function set.Compass(obj, compass)
            %set.Compass Set the value for property Compass
            validateattributes(compass, {'numeric'}, {'vector', 'numel', 3}, 'sens9ax', 'Compass');
            
            javaArray = obj.JavaMessage.getCompass;
            array = obj.writeJavaArray(compass, javaArray, 'double');
            obj.JavaMessage.setCompass(array);
        end
        
        function gyro = get.Gyro(obj)
            %get.Gyro Get the value for property Gyro
            javaArray = obj.JavaMessage.getGyro;
            array = obj.readJavaArray(javaArray, 'double');
            gyro = double(array);
        end
        
        function set.Gyro(obj, gyro)
            %set.Gyro Set the value for property Gyro
            validateattributes(gyro, {'numeric'}, {'vector', 'numel', 3}, 'sens9ax', 'Gyro');
            
            javaArray = obj.JavaMessage.getGyro;
            array = obj.writeJavaArray(gyro, javaArray, 'double');
            obj.JavaMessage.setGyro(array);
        end
        
        function accel = get.Accel(obj)
            %get.Accel Get the value for property Accel
            javaArray = obj.JavaMessage.getAccel;
            array = obj.readJavaArray(javaArray, 'double');
            accel = double(array);
        end
        
        function set.Accel(obj, accel)
            %set.Accel Set the value for property Accel
            validateattributes(accel, {'numeric'}, {'vector', 'numel', 3}, 'sens9ax', 'Accel');
            
            javaArray = obj.JavaMessage.getAccel;
            array = obj.writeJavaArray(accel, javaArray, 'double');
            obj.JavaMessage.setAccel(array);
        end
        
        function fusionpose = get.FusionPose(obj)
            %get.FusionPose Get the value for property FusionPose
            javaArray = obj.JavaMessage.getFusionPose;
            array = obj.readJavaArray(javaArray, 'double');
            fusionpose = double(array);
        end
        
        function set.FusionPose(obj, fusionpose)
            %set.FusionPose Set the value for property FusionPose
            validateattributes(fusionpose, {'numeric'}, {'vector', 'numel', 3}, 'sens9ax', 'FusionPose');
            
            javaArray = obj.JavaMessage.getFusionPose;
            array = obj.writeJavaArray(fusionpose, javaArray, 'double');
            obj.JavaMessage.setFusionPose(array);
        end
        
        function fusionqpose = get.FusionQPose(obj)
            %get.FusionQPose Get the value for property FusionQPose
            javaArray = obj.JavaMessage.getFusionQPose;
            array = obj.readJavaArray(javaArray, 'double');
            fusionqpose = double(array);
        end
        
        function set.FusionQPose(obj, fusionqpose)
            %set.FusionQPose Set the value for property FusionQPose
            validateattributes(fusionqpose, {'numeric'}, {'vector', 'numel', 4}, 'sens9ax', 'FusionQPose');
            
            javaArray = obj.JavaMessage.getFusionQPose;
            array = obj.writeJavaArray(fusionqpose, javaArray, 'double');
            obj.JavaMessage.setFusionQPose(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ID = obj.ID;
            cpObj.Timestamp = obj.Timestamp;
            cpObj.Compass = obj.Compass;
            cpObj.Gyro = obj.Gyro;
            cpObj.Accel = obj.Accel;
            cpObj.FusionPose = obj.FusionPose;
            cpObj.FusionQPose = obj.FusionQPose;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ID = strObj.ID;
            obj.Timestamp = strObj.Timestamp;
            obj.Compass = strObj.Compass;
            obj.Gyro = strObj.Gyro;
            obj.Accel = strObj.Accel;
            obj.FusionPose = strObj.FusionPose;
            obj.FusionQPose = strObj.FusionQPose;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ID = obj.ID;
            strObj.Timestamp = obj.Timestamp;
            strObj.Compass = obj.Compass;
            strObj.Gyro = obj.Gyro;
            strObj.Accel = obj.Accel;
            strObj.FusionPose = obj.FusionPose;
            strObj.FusionQPose = obj.FusionQPose;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.motor_sc.sens9ax.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.motor_sc.sens9ax;
            obj.reload(strObj);
        end
    end
end
